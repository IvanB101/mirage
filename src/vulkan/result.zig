const c = @import("c_libs").import;

pub const Status = enum {
    success,
    not_ready,
    timeout,
    event_set,
    event_reset,
    incomplete,
    pipeline_compile_required,
    thread_idle_khr,
    thread_done_khr,
    operation_deferred_khr,
    operation_deferred_not_khr,
    incompatible_shader_binary_ext,
    pipeline_binary_missing_khr,
};

pub const Error = error{
    OutOfHostMemory,
    OutOfDeviceMemory,
    InitializationFailed,
    DeviceLost,
    MemoryMapFailed,
    LayerNotPresent,
    ExtentionNotPresent,
    FeatureNotPresent,
    IncompatibleDriver,
    TooManyObjects,
    FormatNotSupported,
    FragmentedPool,
    Unknown,
    OutOfPoolMemory,
    InvalidExternalHandle,
    Fragmentation,
    InvalidOpaqueCaptureAddress,
    SurfaceLostKHR,
    NativeWindowInUse,
    SuboptimalKHR,
    OutOfDateKHR,
    IncompatibleDisplayKHR,
    ValidationFailedExt,
    InvalidShaderNV,
    VideoPictureLayoutNotSupportedKHR,
    VideoProfileOperationNotSupportedKHR,
    VideoProfileFormatNotSupportedKHR,
    VideoProfileCodecNotSupportedKHR,
    VideoStdVersionNotSupportedKHR,
    InvalidDRMFormatModifierPlaneLayoutExt,
    FullScreenExclusiveModeLostExt,
    InvalidVideoStdParametersKHR,
    CompressionExhaustedExt,
    NotEnoughSpaceKHR,
};

pub const Result = !Status;

pub fn map(vk_result: c_int) Result {
    return switch (vk_result) {
        c.VK_SUCCESS => .success,
        c.VK_NOT_READY => .not_ready,
        c.VK_TIMEOUT => .timeout,
        c.VK_EVENT_SET => .event_set,
        c.VK_EVENT_RESET => .event_reset,
        c.VK_INCOMPLETE => .incomplete,
        c.VK_PIPELINE_COMPILE_REQUIRED => .pipeline_compile_required,
        c.VK_THREAD_IDLE_KHR => .thread_idle_khr,
        c.VK_THREAD_DONE_KHR => .thread_done_khr,
        c.VK_OPERATION_DEFERRED_KHR => .operation_deferred_khr,
        c.VK_OPERATION_NOT_DEFERRED_KHR => .operation_deferred_not_khr,

        c.VK_ERROR_OUT_OF_HOST_MEMORY => Error.OutOfHostMemory,
        c.VK_ERROR_OUT_OF_DEVICE_MEMORY => Error.OutOfDeviceMemory,
        c.VK_ERROR_INITIALIZATION_FAILED => Error.InitializationFailed,
        c.VK_ERROR_DEVICE_LOST => Error.DeviceLost,
        c.VK_ERROR_MEMORY_MAP_FAILED => Error.MemoryMapFailed,
        c.VK_ERROR_LAYER_NOT_PRESENT => Error.LayerNotPresent,
        c.VK_ERROR_EXTENSION_NOT_PRESENT => Error.ExtentionNotPresent,
        c.VK_ERROR_FEATURE_NOT_PRESENT => Error.FeatureNotPresent,
        c.VK_ERROR_INCOMPATIBLE_DRIVER => Error.IncompatibleDriver,
        c.VK_ERROR_TOO_MANY_OBJECTS => Error.TooManyObjects,
        c.VK_ERROR_FORMAT_NOT_SUPPORTED => Error.FormatNotSupported,
        c.VK_ERROR_FRAGMENTED_POOL => Error.FragmentedPool,
        c.VK_ERROR_UNKNOWN => Error.Unknown,
        c.VK_ERROR_OUT_OF_POOL_MEMORY => Error.OutOfPoolMemory,
        c.VK_ERROR_INVALID_EXTERNAL_HANDLE => Error.InvalidExternalHandle,
        c.VK_ERROR_FRAGMENTATION => Error.Fragmentation,
        c.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS => Error.InvalidOpaqueCaptureAddress,
        c.VK_ERROR_SURFACE_LOST_KHR => Error.SurfaceLostKHR,
        c.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR => Error.NativeWindowInUse,
        c.VK_SUBOPTIMAL_KHR => Error.SuboptimalKHR,
        c.VK_ERROR_OUT_OF_DATE_KHR => Error.OutOfDateKHR,
        c.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR => Error.IncompatibleDisplayKHR,
        c.VK_ERROR_VALIDATION_FAILED_EXT => Error.ValidationFailedExt,
        c.VK_ERROR_INVALID_SHADER_NV => Error.InvalidShaderNV,
        c.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT => Error.InvalidDRMFormatModifierPlaneLayoutExt,
        c.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT => Error.FullScreenExclusiveModeLostExt,
        else => Error.Unknown,
    };
}

pub fn explain(result: Result) []const u8 {
    return switch (result) {
        Status.success => "todo",
        Status.not_ready => "todo",
        Status.timeout => "todo",
        Status.event_set => "todo",
        Status.event_reset => "todo",
        Status.incomplete => "todo",
        Status.pipeline_compile_required => "todo",
        Status.thread_idle_khr => "todo",
        Status.thread_done_khr => "todo",
        Status.operation_deferred_khr => "todo",
        Status.operation_deferred_not_khr => "todo",
        Status.incompatible_shader_binary_ext => "todo",
        Status.pipeline_binary_missing_khr => "todo",

        Error.OutOfHostMemory => "todo",
        Error.OutOfDeviceMemory => "todo",
        Error.InitializationFailed => "todo",
        Error.DeviceLost => "todo",
        Error.MemoryMapFailed => "todo",
        Error.LayerNotPresent => "todo",
        Error.ExtentionNotPresent => "todo",
        Error.FeatureNotPresent => "todo",
        Error.IncompatibleDriver => "todo",
        Error.TooManyObjects => "todo",
        Error.FormatNotSupported => "todo",
        Error.FragmentedPool => "todo",
        Error.Unknown => "todo",
        Error.OutOfPoolMemory => "todo",
        Error.InvalidExternalHandle => "todo",
        Error.Fragmentation => "todo",
        Error.InvalidOpaqueCaptureAddress => "todo",
        Error.SurfaceLostKHR => "todo",
        Error.NativeWindowInUse => "todo",
        Error.SuboptimalKHR => "todo",
        Error.OutOfDateKHR => "todo",
        Error.IncompatibleDisplayKHR => "todo",
        Error.ValidationFailedExt => "todo",
        Error.InvalidShaderNV => "todo",
        Error.VideoPictureLayoutNotSupportedKHR => "todo",
        Error.VideoProfileOperationNotSupportedKHR => "todo",
        Error.VideoProfileFormatNotSupportedKHR => "todo",
        Error.VideoProfileCodecNotSupportedKHR => "todo",
        Error.VideoStdVersionNotSupportedKHR => "todo",
        Error.InvalidDRMFormatModifierPlaneLayoutExt => "todo",
        Error.FullScreenExclusiveModeLostExt => "todo",
        Error.InvalidVideoStdParametersKHR => "todo",
        Error.CompressionExhaustedExt => "todo",
        Error.NotEnoughSpaceKHR => "todo",
    };
}
